#include <stdio.h>
#include <stdlib.h>
#include <curl/curl.h>

#define API_KEY "YOUR_API_KEY"

int main(void) {
  CURL *curl;
  CURLcode res;
  char *response_buffer;
  size_t response_size;

  /* Initialize the curl session */
  curl = curl_easy_init();
  if (curl == NULL) {
    fprintf(stderr, "Failed to initialize curl\n");
    return 1;
  }

  /* Set the API key */
  curl_easy_setopt(curl, CURLOPT_APIKEY, API_KEY);

  /* Set the URL */
  curl_easy_setopt(curl, CURLOPT_URL, "https://api.openweathermap.org/data/2.5/weather?q=London,uk");

  /* Set the response type */
  curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_response);

  /* Perform the request */
  res = curl_easy_perform(curl);
  if (res != CURLE_OK) {
    fprintf(stderr, "Failed to perform request: %s\n", curl_easy_strerror(res));
    return 1;
  }

  /* Get the response size */
  curl_easy_getinfo(curl, CURLINFO_RESPONSE_SIZE, &response_size);

  /* Allocate memory for the response buffer */
  response_buffer = malloc(response_size);
  if (response_buffer == NULL) {
    fprintf(stderr, "Failed to allocate memory for response buffer\n");
    return 1;
  }

  /* Read the response into the buffer */
  res = curl_easy_read(curl, response_buffer, response_size);
  if (res != CURLE_OK) {
    fprintf(stderr, "Failed to read response: %s\n", curl_easy_strerror(res));
    return 1;
  }

  /* Close the curl session */
  curl_easy_cleanup(curl);

  /* Parse the JSON response */
  struct weather_data {
    char *city;
    int temperature;
    char *description;
  };

  struct weather_data data;
  json_object *root = json_parse(response_buffer);
  if (root == NULL) {
    fprintf(stderr, "Failed to parse JSON response\n");
    return 1;
  }

  data.city = json_object_get_string(root, "name");
  data.temperature = json_object_get_int(root, "main.temp");
  data.description = json_object_get_string(root, "weather[0].description");

  /* Display the weather data */
  printf("City: %s\n", data.city);
  printf("Temperature: %dÂ°C\n", data.temperature);
  printf("Description: %s\n", data.description);

  /* Free the memory allocated for the response buffer */
  free(response_buffer);

  return 0;
}

/* Writes the response data to the specified buffer */
size_t write_response(void *ptr, size_t size, size_t nmemb, void *stream) {
  size_t written = size * nmemb;
  char *buffer = (char *)stream;

  /* Write the response data to the buffer */
  memcpy(buffer, ptr, written);

  return written;
}
